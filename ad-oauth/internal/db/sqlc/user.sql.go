// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (github_id, username, email, token)
VALUES ($1, $2, $3, $4)
RETURNING id, github_id, username, email, token, created_at, updated_at
`

type CreateUserParams struct {
	GithubID int64       `json:"github_id"`
	Username string      `json:"username"`
	Email    pgtype.Text `json:"email"`
	Token    string      `json:"token"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.GithubID,
		arg.Username,
		arg.Email,
		arg.Token,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.Username,
		&i.Email,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByGitHubID = `-- name: GetUserByGitHubID :one
SELECT id, github_id, username, email, token, created_at, updated_at
FROM users
WHERE github_id = $1
`

func (q *Queries) GetUserByGitHubID(ctx context.Context, githubID int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByGitHubID, githubID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.Username,
		&i.Email,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, github_id, username, email, token, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GithubID,
		&i.Username,
		&i.Email,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserToken = `-- name: UpdateUserToken :exec
UPDATE users
SET token = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateUserTokenParams struct {
	ID    pgtype.UUID `json:"id"`
	Token string      `json:"token"`
}

func (q *Queries) UpdateUserToken(ctx context.Context, arg UpdateUserTokenParams) error {
	_, err := q.db.Exec(ctx, updateUserToken, arg.ID, arg.Token)
	return err
}
